<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zeekie.stock.respository.DealMapper">

	<resultMap type="com.zeekie.stock.entity.BaseEntrustDO" id="resultEntrustInfo">
		<result column="TRADE_ACCOUNT" property="operatorNo" jdbcType="VARCHAR"/>
		<result column="ENTRUST_NO" property="entrustNo" jdbcType="VARCHAR"/>
		<result column="FUND_ACCOUNT" property="fundAccount" jdbcType="VARCHAR"/>
		<result column="COMBINE_ID" property="combineId" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap type="com.zeekie.stock.entity.CombassetDO" id="resultCombasset">
		<result column="ACTUAL_CASH" property="assetTotalValue" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
		<result column="CURRENT_CASH" property="assetValue" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
		<result column="CURRENT_CASH" property="currentCash" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
	</resultMap>
	
	<resultMap type="com.zeekie.stock.entity.CurrentEntrustDO" id="resultCurrentEntrust">
		<result column="FUND_ACCOUNT" property="fundAccount" jdbcType="VARCHAR"/>
		<result column="COMBINE_ID" property="combineId" jdbcType="VARCHAR"/>
		<result column="EXCHANGE_TYPE" property="exchangeType" jdbcType="VARCHAR"/>
		<result column="ENTRUST_DIRECTION" property="entrustDirection" jdbcType="VARCHAR"/>
		<result column="STOCK_CODE" property="stockCode" jdbcType="VARCHAR"/>
		<result column="AMENTRUST_STATUS" property="amentrustStatus" jdbcType="VARCHAR"/>
		<result column="ENTRUST_PRICE" property="entrustPrice" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
		<result column="ENTRUST_AMOUNT" property="entrustAmount" jdbcType="VARCHAR"/>
		<result column="ENTRUST_NO" property="entrustNo" jdbcType="VARCHAR"/>
		<result column="BUSINESS_BALANCE" property="businessBalance" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
		<result column="BUSINESS_AMOUNT" property="businessAmount" jdbcType="VARCHAR"/>
		<result column="ENTRUST_DATES" property="entrustDate" jdbcType="VARCHAR"/>
		<result column="ENTRUST_TIME" property="entrustTime" jdbcType="VARCHAR"/>
		<result column="CANCEL_INFO" property="cancelInfo" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap type="com.zeekie.stock.entity.StockCodeDO" id="resultStockCode">
		<result column="stock_Code" property="stockCode" jdbcType="VARCHAR"/>
		<result column="id" property="id" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap type="com.zeekie.stock.entity.ProductDO" id="resultProduct">
		<result column="Financeincome" property="financeIncome" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
		<result column="Stockincome" property="stockIncome" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
		<result column="Guessincome" property="guessIncome" jdbcType="VARCHAR"/>
		<result column="code" property="code"  jdbcType="VARCHAR"/>
		<result column="OPEN_PRODUCT" property="flag"  jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap type="com.zeekie.stock.entity.GuessProductDO" id="resultguess">
		<result column="BID_CODE" property="code" jdbcType="VARCHAR"/>
		<result column="NAME" property="name" jdbcType="VARCHAR"/>
		<result column="RISENUM" property="riseNum" jdbcType="VARCHAR"/>
		<result column="FAILNUM" property="failNum" jdbcType="VARCHAR"/>
		<result column="PUBLISH_TIME" property="publishTime" jdbcType="VARCHAR"/>
		<result column="STATUS" property="status" jdbcType="VARCHAR"/>
		<result column="GUESSRESULT" property="guessResult" jdbcType="VARCHAR"/>
		<result column="PURCHASE_NUM" property="perNum" jdbcType="VARCHAR"/>
		<result column="PUMPED_PERCENT" property="pumpedPercent" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
	</resultMap>
	
	<resultMap type="com.zeekie.stock.entity.CUrrentGuessProductDO" id="resultCurrentGuessProduct">
		<result column="BID_CODE" property="bidCode" jdbcType="VARCHAR"/>
		<result column="Status" property="status" jdbcType="VARCHAR"/>
		<result column="Risepercent" property="risePercent" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
		<result column="Failpercent" property="failPercent" typeHandler="com.zeekie.stock.handler.TwoDecimalFloatTypeHander"/>
		<result column="NAME" property="name" jdbcType="VARCHAR"/>
		<result column="Purchase_Num" property="perNum" jdbcType="VARCHAR"/>
		<result column="Guess_Status" property="isGuessed" jdbcType="VARCHAR"/>
		<result column="Guess_Result" property="guessResult" jdbcType="VARCHAR"/>
		<result column="Publish_Time" property="publishTime" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap type="com.zeekie.stock.entity.GuessHistoryDO" id="resultHistoryGuess">
	<!-- 	<result column="BID_CODE" property="code" jdbcType="VARCHAR"/>
		<result column="NAME" property="name" jdbcType="VARCHAR"/> -->
		<result column="GUESS_STATUS" property="guessStatus" jdbcType="VARCHAR"/>
		<result column="ACTUAL_RESULT" property="actualStatus" jdbcType="VARCHAR"/>
		<result column="PROFIT_NUM" property="profitNum" jdbcType="VARCHAR"/>
		<result column="PURCHASE_NUM" property="purchaseNum" jdbcType="VARCHAR"/>
		<result column="PURCHASE_TIME" property="purchaseTime" jdbcType="VARCHAR"/>
		<result column="CORRECTNUM" property="correctNum" jdbcType="VARCHAR"/>
		<result column="FAILNUM" property="failNum" jdbcType="VARCHAR"/>
	</resultMap>
	
	<resultMap type="com.zeekie.stock.entity.GuessHistoryDO" id="resultGuessDetail">
		<result column="BID_CODE" property="code" jdbcType="VARCHAR"/>
		<result column="NAME" property="name" jdbcType="VARCHAR"/>
		<result column="GUESS_STATUS" property="guessStatus" jdbcType="VARCHAR"/>
		<result column="ACTUAL_RESULT" property="actualStatus" jdbcType="VARCHAR"/>
		<result column="PROFIT_NUM" property="profitNum" jdbcType="VARCHAR"/>
		<result column="PURCHASE_NUM" property="purchaseNum" jdbcType="VARCHAR"/>
		<result column="PURCHASE_TIME" property="purchaseTime" jdbcType="VARCHAR"/>
		<result column="nickname" property="nickname" jdbcType="VARCHAR"/>
	</resultMap>

	<insert id="insertEntrust" parameterType="com.zeekie.stock.service.homes.entity.EntrustEntity">
		<selectKey order="BEFORE" resultType="LONG" keyProperty="id">
			select SEQ_stock_entrust_id.Nextval from dual
		</selectKey>
		INSERT INTO STOCK_ENTRUST
		  (ID,
		   NICKNAME,
		   TRADE_ACCOUNT,
		   COMBINE_ID,
		   FUND_ACCOUNT,
		   ENTRUST_NO,
		   BATCH_NO,
		   STOCK_CODE,
		   EXCHANGE_TYPE,
		   ENTRUST_DIRECTION,
		   ENTRUST_PRICE,
		   ENTRUST_AMOUNT)
		VALUES
		  (#{id},
		   #{nickname},
		   #{operateNo},
		   #{combineId},
		   #{fundAccount},
		   #{entrust_no},
		   #{batch_no},
		   #{stock_code},
		   #{exchange_type},
		   #{entrust_direction},
		   #{entrust_price},
		   #{entrust_amount}
		   )
	</insert>
	
	<select id="queryEntrustInfo" parameterType="string" resultMap="resultEntrustInfo">
		select t.TRADE_ACCOUNT,t.ENTRUST_NO,t.FUND_ACCOUNT,t.COMBINE_ID from STOCK_ENTRUST t where t.nickname = #{nickname}
		<if test="entrustNo!=null and entrustNo!=''">
			and t.ENTRUST_NO = #{entrustNo}
		</if>
		AND ROWNUM = 1
	</select>
	
	<select id="queryCombasset" parameterType="string" resultMap="resultCombasset">
		SELECT M.ACTUAL_CASH, M.CURRENT_CASH
		  FROM STOCK_USER_OPERATE_MAININFO M
		 WHERE M.NICKNAME = #{nickname} and m.is_current='1'
	</select>
	
	
	<!-- 查询当日委托 -->
	<select id="queryEntrustHistory" parameterType="string" resultMap="resultCurrentEntrust">
		SELECT E.*,TO_CHAR(ENTRUST_DATE, 'yyyy-mm-dd') ENTRUST_DATES
		  FROM STOCK_ENTRUST E
		 WHERE E.NICKNAME = #{nickname}
		   AND TO_CHAR(E.ENTRUST_DATE, 'yyyy-mm-dd') &gt;= #{startDate}
		   AND TO_CHAR(E.ENTRUST_DATE, 'yyyy-mm-dd') &lt;= #{endDate}
	</select>
	
	<insert id="updateEntrust" parameterType="com.zeekie.stock.service.homes.entity.EntrustQueryEntity">
<!-- 	    update STOCK_ENTRUST p set 
	   	 	   P.business_amount = #{business_amount},P.business_balance = #{business_balance},
	    	   P.cancel_info =#{cancel_info}, P.amentrust_status = #{amentrust_status}
	    where P.stock_code = #{stock_code} AND P.nickname = #{nickname}  
		AND P.entrust_no = #{entrust_no}   -->
 
			MERGE INTO STOCK_ENTRUST P
			USING (SELECT  
							#{business_amount} business_amount,
							#{business_balance} business_balance,
							#{cancel_info} cancel_info,
							#{amentrust_status} amentrust_status,
							#{stock_code} stock_code,
							#{nickname} nickname,
							#{entrust_no} entrust_no,
							#{entrust_time} entrust_time,
							#{batch_no} batch_no,
							#{exchange_type} exchange_type,
							#{entrust_direction} entrust_direction,
							#{entrust_price} entrust_price,
							#{entrust_amount} entrust_amount,
							#{fundAccount} FUND_ACCOUNT,
							#{combineId} COMBINE_ID,
							TO_DATE(#{entrust_day}, 'YYYY-MM-DD HH24:MI:SS')  entrust_DATE,
							#{operateNo} TRADE_ACCOUNT
			         FROM DUAL) T
			ON (P.STOCK_CODE = T.STOCK_CODE  AND P.ENTRUST_NO = T.ENTRUST_NO)
			WHEN MATCHED THEN
			  UPDATE
			     SET P.BUSINESS_AMOUNT  = T.BUSINESS_AMOUNT,
			         P.BUSINESS_BALANCE = T.BUSINESS_BALANCE,
			         P.CANCEL_INFO      = T.CANCEL_INFO,
			         P.AMENTRUST_STATUS = T.AMENTRUST_STATUS
			WHEN NOT MATCHED THEN
			  INSERT
			    (P.ID,
			     P.TRADE_ACCOUNT,
			     P.COMBINE_ID,
			     P.FUND_ACCOUNT,
			     P.ENTRUST_AMOUNT,
			     P.ENTRUST_PRICE,
			     P.ENTRUST_DIRECTION,
			     P.EXCHANGE_TYPE,
			     P.BATCH_NO,
			     P.ENTRUST_TIME,
			     P.ENTRUST_NO,
			     P.NICKNAME,
			     P.STOCK_CODE,
			     P.AMENTRUST_STATUS,
			     P.CANCEL_INFO,
			     P.BUSINESS_BALANCE,
			     P.ENTRUST_DATE ,
			     P.BUSINESS_AMOUNT)
			  VALUES
			    ( SEQ_stock_entrust_id.Nextval,
			     T.TRADE_ACCOUNT,
			     T.COMBINE_ID,
			     T.FUND_ACCOUNT,
			     T.ENTRUST_AMOUNT,
			     T.ENTRUST_PRICE,
			     T.ENTRUST_DIRECTION,
			     T.EXCHANGE_TYPE,
			     T.BATCH_NO,
			     T.entrust_time,
			     T.ENTRUST_NO,
			     T.NICKNAME,
			     T.STOCK_CODE,
			     T.AMENTRUST_STATUS,
			     T.CANCEL_INFO,
			     T.BUSINESS_BALANCE,
			     T.entrust_DATE,
			     T.BUSINESS_AMOUNT)

	</insert>
	<select id="queryEntrustComm" parameterType="com.zeekie.stock.entity.CurrentEntrustDO" resultMap="resultCurrentEntrust">
		SELECT E.*,
		       SUBSTR(TO_CHAR(SYSDATE, 'yyyymmddhh24miss'), 9) ENTRUST_TIMES
		  FROM STOCK_ENTRUST E 
		 <where>
			 <if test="startDate != null">
			      AND E.ENTRUST_DATE  &gt;= to_date(#{startDate} , 'yyyy-mm-dd hh24:mi:ss')
			 </if>
			 <if test="endDate != null">
			      AND  E.ENTRUST_DATE &lt;= to_date(#{endDate} , 'yyyy-mm-dd hh24:mi:ss')
			 </if>
			 <if test="amentrustStatus != null">
			      AND  E.AMENTRUST_STATUS  = #{amentrustStatus}
			 </if>
			 <if test="statusArray != null">
			     AND  E.AMENTRUST_STATUS  in
			    <foreach collection="statusArray" index="index" item="item" open="(" separator="," close=")">  
                       #{item}  
                </foreach>
			 </if>
		     AND E.NICKNAME = #{nickName}
		 </where>
    </select>
    
    
    
    <select id="queryTradeInfoByCombineId" parameterType="string" resultMap="resultCurrentEntrust">
	    select m.nickname ,a.trade_acount as  operatorNo
	    from stock_user_operate_maininfo  m  left join stock_user_operate_acount  a  
	    on m.operate_account_id = a.id  
	    where  m.start_date &lt;=   to_date(#{entrustTime} , 'yyyy-mm-dd hh24:mi:ss') and   m.end_date &gt;= to_date(#{entrustTime} , 'yyyy-mm-dd hh24:mi:ss')  and  a.combie_id= #{combineId}
    </select>
   
   <select id="queryStopFlag" parameterType="string" resultType="string">
   	select STOP_BUY from stock_user_operate_maininfo where nickname=#{nickname} and is_current='1' and rownum=1
   </select>
   
	<select id="queryStockCode" parameterType="com.zeekie.stock.web.StockCodePage" resultMap="resultStockCode">
    	<include refid="com.zeekie.stock.service.PageMappper.PagePrefix" />
    	select stock_Code,id
    	 from STOCK_CODE 
    	 WHERE 1=1
    	<if test="stockCode != null and stockCode!=''">
		   AND stockCode = #{stockCode}
	 	</if>
    	<include refid="com.zeekie.stock.service.PageMappper.PagePostfix" />
    </select>
    
    <select id="queryStockCodeNum" parameterType="string" resultType="long">
        select count(1)
    	 from STOCK_CODE r 
    	where 1=1
   	 <if test="stockCode != null and stockCode!=''">
		   AND stockCode = #{stockCode}
	 </if>
    </select>
    
    <delete id="updateStockCode" parameterType="string">
    	delete from STOCK_CODE where stock_code = #{stockCode}
    </delete>
    
    <insert id="saveStockCode">
    	<selectKey order="BEFORE" resultType="LONG" keyProperty="id">
			select SEQ_STOCK_CODE_ID.Nextval from dual
		</selectKey> 
		insert into STOCK_CODE values(#{id},#{stockCode})
    </insert>
    
    <update id="updateStock" parameterType="long">
    	update STOCK_CODE set STOCK_CODE = #{stockCode} where id = #{id} 
    </update>
    
    <select id="queryAllStockCode" resultType="string">
    	select STOCK_CODE from STOCK_CODE
    </select>
    
    <update id="updateProductStatus" parameterType="string">
    	update STOCK_PRODUCT set STATUS = #{status} where PRODUCT_CODE = #{code}
    </update>
    
    <select id="queryProduct" parameterType="string" resultMap="resultProduct">
    	Select (Select Sum(r.Current_Income)
	          From Stock_Finance_Record r
	         Where r.Carry_Date >= Sysdate
	           And Exists (Select 1
	                  From Stock_Product p
	                 Where p.Product_Code = '10'
	                   And p.Status = 'Y')
	           And r.User_Id = u.Id) Financeincome,
	       (Select m.Profit_Loss_Radio
	          From Stock_User_Operate_Maininfo m
	         Where m.Is_Current = '1'
	           And m.Nickname = u.Nickname
	           And Exists (Select 1
	                  From Stock_Product p
	                 Where p.Product_Code = '11'
	                   And p.Status = 'Y')) Stockincome,
	       (Select Count(1)
	          From Stock_Guess_Up_Down g
	         Where g.User_Id = u.Id
	           And g.Actual_Result = g.Guess_Status
	           And g.GUESS_STATUS = 'rise') Guessincome,
	       (Select wmsys.wm_concat(product_code) From Stock_Product t Where t.status='Y') code,
	       u.OPEN_PRODUCT
	  From Stock_User u
	 Where u.Nickname = #{nickname}
    </select>
    
    <update id="updateHhb" parameterType="string">
    	update stock_user_wallet w set w.hhb = (CASE
                 WHEN W.HHB IS NULL THEN
                  0
                 ELSE
                  W.HHB
               END)  + to_number(#{num}) ,w.BALANCE = w.BALANCE - (SELECT TO_NUMBER(#{num}) * P.UNIT_PRICE FROM STOCK_GUESS_PERCENT P)
    	where NICKNAME = #{nickname}
    </update>
    
   <update id="updateHhbbyId" parameterType="string">
    	update stock_user_wallet w set w.hhb = (CASE
                 WHEN W.HHB IS NULL THEN
                  0
                 ELSE
                  W.HHB
               END)  + (select p.SIGN_FOR_HHB from stock_guess_percent p )
    	where exists(select 1 from stock_user u where u.id = #{userId} and u.nickname = w.nickname)
    </update>
    
    <select id="queryGuessproduct" parameterType="com.zeekie.stock.web.GuessPage" resultMap="resultguess">
    	<include refid="com.zeekie.stock.service.PageMappper.PagePrefix" />
			SELECT BID_CODE,
			       NAME,
			       STATUS,
			       (CASE
			         WHEN GUESS_RESULT = 'rise' THEN
			          '涨'
			          WHEN GUESS_RESULT = 'fail' THEN
          			  '跌'
			       END) GUESSRESULT,
			       (SELECT COUNT(1)
			          FROM STOCK_GUESS_UP_DOWN G
			         WHERE G.BID_CODE = C.BID_CODE
			           AND G.GUESS_STATUS = 'rise') RISENUM,
			       (SELECT COUNT(1)
			          FROM STOCK_GUESS_UP_DOWN G
			         WHERE G.BID_CODE = C.BID_CODE
			           AND G.GUESS_STATUS = 'fail') FAILNUM,
			       TO_CHAR(PUBLISH_TIME, 'yyyy-mm-dd hh24:mi:ss') PUBLISH_TIME,
			       PURCHASE_NUM,
			       PUMPED_PERCENT
			  FROM STOCK_CRAZY_GUESS C
			 <!-- WHERE STATUS = 'Y' -->
    	<if test="stockCode != null and stockCode!=''">
		   AND to_char(PUBLISH_TIME,'yyyy-MM-dd') = #{date}
	 	</if>
	 	order by PUBLISH_TIME desc
    	<include refid="com.zeekie.stock.service.PageMappper.PagePostfix" />
    </select>
    
    <select id="queryGuessproductTotal" parameterType="string" resultType="long">
        select count(1)
    	 from STOCK_CRAZY_GUESS r 
    	where 1=1
   	 <if test="date != null and date!=''">
		   AND to_char(PUBLISH_TIME,'yyyy-MM-dd') = #{date}
	 </if>
    </select>
    
    <insert id="saveGuessProduct" parameterType="string">
    	<selectKey order="BEFORE" resultType="LONG" keyProperty="id">
			select SEQ_STOCK_CRAZY_GUESS_ID.Nextval from dual
		</selectKey> 
		insert into STOCK_CRAZY_GUESS(id,bid_code,name,PURCHASE_NUM,PUMPED_PERCENT) 
		values(#{id},#{code},#{name},#{purchaseNum},#{pumpedPercent})
    </insert>
    
    <select id="queryUnitPrice" resultType="string">
    	select p.UNIT_PRICE from STOCK_GUESS_PERCENT p
    </select>
    
    <select id="queryCurrentGuessProduct" parameterType="string" resultMap="resultCurrentGuessProduct">
		select *
		  from (Select g.Bid_Code,
		               Name,
		               Purchase_Num,
		               Status,
		               Guess_Result,
		               round(((Select Count(1)
		                         From Stock_Guess_Up_Down s
		                        Where s.Bid_Code = g.Bid_Code
		                          And s.Guess_Status = 'rise') /
		                     (Select (CASE
		                                WHEN COUNT(1) = 0 THEN
		                                 1
		                                ELSE
		                                 COUNT(1)
		                              END)
		                         From Stock_Guess_Up_Down s
		                        Where s.Bid_Code = g.Bid_Code)),
		                     2) Risepercent,
		               round(((Select Count(1)
		                         From Stock_Guess_Up_Down s
		                        Where s.Bid_Code = g.Bid_Code
		                          And s.Guess_Status = 'fail') /
		                     (Select (CASE
		                                WHEN COUNT(1) = 0 THEN
		                                 1
		                                ELSE
		                                 COUNT(1)
		                              END)
		                         From Stock_Guess_Up_Down s
		                        Where s.Bid_Code = g.Bid_Code)),
		                     2) Failpercent,
		               (Select u.Guess_Status
		                  From Stock_Guess_Up_Down u
		                 Where u.Bid_Code = g.Bid_Code
		                   And Exists (Select 1
		                          From Stock_User k
		                         Where k.Id = u.User_Id
		                           And k.Nickname = #{nickname})) Guess_Status,
		                 TO_CHAR(g.Publish_Time, 'yyyy-mm-dd') Publish_Time        
		          From Stock_Crazy_Guess g
		         Order By g.Publish_Time Desc) u
		 where rownum = 1
    </select>
    
    <insert id="updateGuess" parameterType="string">
    	<selectKey order="BEFORE" resultType="LONG" keyProperty="id">
			select seq_stock_guess_up_down_id.Nextval from dual
		</selectKey> 
		INSERT INTO STOCK_GUESS_UP_DOWN
		  (ID, USER_ID, BID_CODE, GUESS_STATUS, PURCHASE_CASH, PURCHASE_NUM)
		VALUES
		  (#{id},
		   (SELECT ID FROM STOCK_USER U WHERE U.NICKNAME = #{nickname}),
		   #{bidCode},
		   #{type},
		   (SELECT TO_NUMBER(#{num}) * P.UNIT_PRICE FROM STOCK_GUESS_PERCENT P),
		   #{num})
    </insert>
    
    <update id="updateGuessResult" parameterType="string">
    	update stock_crazy_guess c set c.STATUS='N' ,c.GUESS_RESULT=#{type}
    	where c.BID_CODE = #{code}
    </update>
    
    <update id="updateGuessRecord" parameterType="string">
		UPDATE STOCK_GUESS_UP_DOWN C
		   SET C.PROFIT_NUM = (CASE
		                        WHEN C.GUESS_STATUS = #{type} THEN
		                         (SELECT decode(SUM(K.PURCHASE_NUM),null,0,SUM(K.PURCHASE_NUM))
		                            FROM STOCK_GUESS_UP_DOWN K
		                           WHERE K.GUESS_STATUS != #{type}
		                             AND K.BID_CODE = C.BID_CODE) /
		                         (SELECT COUNT(1)
		                            FROM STOCK_GUESS_UP_DOWN U
		                           WHERE u.GUESS_STATUS = #{type}
		                             AND u.BID_CODE = C.BID_CODE)*
		                             (1 - (SELECT P.PUMPED_PERCENT
					                   FROM STOCK_CRAZY_GUESS P
					                  WHERE P.BID_CODE = C.BID_CODE))
		                        ELSE
		                          -C.PURCHASE_NUM
		                      END),
		       C.ACTUAL_RESULT = #{type}
		 WHERE C.BID_CODE = #{code}
    </update>
    
    <update id="addHhb" parameterType="string">
		UPDATE STOCK_USER_WALLET W
		   SET W.HHB = W.HHB + (CASE
		                 WHEN (SELECT G.PURCHASE_NUM + G.PROFIT_NUM
		                         FROM STOCK_GUESS_UP_DOWN G
		                        WHERE EXISTS (SELECT 1
		                                 FROM STOCK_USER U
		                                WHERE U.ID = G.USER_ID
		                                  AND W.NICKNAME = U.NICKNAME)
		                          AND G.GUESS_STATUS = G.ACTUAL_RESULT
		                          AND G.BID_CODE = #{code}) IS NULL THEN
		                  0
		                 ELSE
		                  (SELECT G.PURCHASE_NUM + G.PROFIT_NUM
		                     FROM STOCK_GUESS_UP_DOWN G
		                    WHERE EXISTS (SELECT 1
		                             FROM STOCK_USER U
		                            WHERE U.ID = G.USER_ID
		                              AND W.NICKNAME = U.NICKNAME)
		                      AND G.GUESS_STATUS = G.ACTUAL_RESULT
		                      AND G.BID_CODE = #{code})
		               END)
    </update>
    
    <select id="queryHhb" parameterType="string" resultType="string">
    	select 1 from stock_user_wallet w where w.hhb>=to_number(#{num}) and w.nickname =#{nickname}
    </select>
    
    <update id="modifyhhb" parameterType="string">
    	update STOCK_USER_WALLET w set w.hhb = w.hhb - to_number(#{num}) where w.nickname =#{nickname}
    </update> 
    
     <update id="modifyhhbAndBalance" parameterType="string">
    	update STOCK_USER_WALLET w set w.hhb = w.hhb - to_number(#{num}),W.BALANCE = W.BALANCE + #{cash}  where w.nickname =#{nickname}
    </update> 
    
	<select id="getHistoryGuess" resultMap="resultHistoryGuess" parameterType="string">
		SELECT U.BID_CODE,
			   (SELECT G.NAME FROM STOCK_CRAZY_GUESS G WHERE G.BID_CODE = U.BID_CODE) NAME,
			   U.GUESS_STATUS,
			   U.ACTUAL_RESULT,
			   U.PROFIT_NUM,
			   U.PURCHASE_NUM,
			   TO_CHAR(u.PURCHASE_TIME, 'yyyy-mm-dd') PURCHASE_TIME,
			   (SELECT COUNT(1)
		          FROM STOCK_GUESS_UP_DOWN K
		         WHERE K.USER_ID =#{userId}
		           AND K.GUESS_STATUS = K.ACTUAL_RESULT) CORRECTNUM,
		       (SELECT COUNT(1)
		          FROM STOCK_GUESS_UP_DOWN K 
		         WHERE K.USER_ID = #{userId}
		           AND K.GUESS_STATUS != K.ACTUAL_RESULT) FAILNUM
		  FROM (SELECT ROW_NUMBER() OVER(ORDER BY T.PURCHASE_TIME DESC) AS NUM, T.*
				  FROM STOCK_GUESS_UP_DOWN T
				 WHERE T.USER_ID = #{userId}) U
		 WHERE NUM &gt;= #{offset} + 1 
		   AND NUM &lt;= #{offset} + 20
    </select>
    
    <insert id="updateSignTable" parameterType="string">
    	insert into STOCK_USER_SIGN(USER_ID) values(#{userId})
    </insert>
    
    <select id="querySignFlag" resultType="string">
    	select 1 from STOCK_USER_SIGN s where to_char(s.SIGN_DATE,'yyyy-MM-dd')=to_char(sysdate,'yyyy-MM-dd')
    	and s.USER_ID = #{userId} and rownum = 1
    </select>
    
    <select id="queryGuessDetailCount" parameterType="string" resultType="long">
    	select count(1)
    	from STOCK_GUESS_UP_DOWN u
    	<where>
    		u.bid_code = #{bidCode}
    	</where>
    </select>
    
    <select id="queryGuessDetail" parameterType="com.zeekie.stock.web.GuessDetailPage" resultMap="resultGuessDetail">
    	<include refid="com.zeekie.stock.service.PageMappper.PagePrefix" />
    	SELECT U.BID_CODE,
			   (SELECT G.NAME FROM STOCK_CRAZY_GUESS G WHERE G.BID_CODE = U.BID_CODE) NAME,
			   U.GUESS_STATUS,
			   U.ACTUAL_RESULT,
			   U.PROFIT_NUM,
			   U.PURCHASE_NUM,
			   TO_CHAR(u.PURCHASE_TIME, 'yyyy-mm-dd HH24:mi:ss') PURCHASE_TIME,
		       (select nickname from stock_user k where k.id = u.user_id) nickname
		  FROM STOCK_GUESS_UP_DOWN U
		  <where>
		  	 u.bid_code = #{bidCode}
		  </where>
    	<include refid="com.zeekie.stock.service.PageMappper.PagePostfix" />
    </select>
    
    <update id="updateGuessStatus">
    	update stock_crazy_guess g
		   set g.status = 'P'
		 WHERE g.id = (select max(id) from stock_crazy_guess k)
    </update>
    
    <select id="queryGuessStatus" resultType="string">
    	select  status from stock_crazy_guess g WHERE g.id = (select max(id) from stock_crazy_guess k)
    </select>
</mapper>