<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  
            http://www.springframework.org/schema/context  
            http://www.springframework.org/schema/context/spring-context-3.1.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">


	<context:component-scan base-package="com.zeekie.stock.service">
		<context:include-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>

	<!-- 应用属性配置文件 -->
	<context:property-placeholder location="classpath:spring.properties" />

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="driverClass">
			<value>${datasource.driverClassName}</value>
		</property>
		<property name="jdbcUrl">
			<value>${datasource.url}</value>
		</property>
		<property name="user">
			<value>${datasource.username}</value>
		</property>
		<property name="password">
			<value>${datasource.password}</value>
		</property>
		<property name="acquireIncrement">
			<value>${c3p0.acquireIncrement}</value>
		</property>
		<property name="idleConnectionTestPeriod">
			<value>${c3p0.idleConnectionTestPeriod}</value>
		</property>
		<property name="checkoutTimeout">
			<value>${c3p0.checkoutTimeout}</value>
		</property>
		<property name="maxPoolSize">
			<value>${c3p0.maxPoolSize}</value>
		</property>
		<property name="minPoolSize">
			<value>${c3p0.minPoolSize}</value>
		</property>
		<property name="maxStatements">
			<value>${c3p0.maxStatements}</value>
		</property>
		<property name="initialPoolSize">
			<value>${c3p0.initialPoolSize}</value>
		</property>

		<!--<property name="properties"> <props> <prop key="user">${datasource.username}</prop> 
			<prop key="password">${datasource.password}</prop> <prop key="clientEncoding">ISO8859_1</prop> 
			<prop key="serverEncoding">GBK</prop> </props> </property> -->
	</bean>
	
	<!-- <bean id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource"  
        init-method="init" destroy-method="close">  
        基本属性 url、user、password  
        <property name="url" value="${druid.dataSource.url}" />  
        <property name="username" value="${druid.dataSource.username}" />  
        <property name="password" value="${druid.dataSource.password}" />  
        <property name="connectionProperties" value="${druid.dataSource.driver}"></property>  
  
        配置初始化大小、最小、最大  
        <property name="initialSize" value="1" />  
        <property name="minIdle" value="1" />  
        <property name="maxActive" value="20" />  
  
        配置获取连接等待超时的时间  
        <property name="maxWait" value="60000" />  
  
        配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒  
        <property name="timeBetweenEvictionRunsMillis" value="60000" />  
  
        配置一个连接在池中最小生存的时间，单位是毫秒  
        <property name="minEvictableIdleTimeMillis" value="300000" />  
  
        <property name="validationQuery" value="SELECT 'x'" />  
        <property name="testWhileIdle" value="true" />  
        <property name="testOnBorrow" value="false" />  
        <property name="testOnReturn" value="false" />  
  
        打开PSCache，并且指定每个连接上PSCache的大小  
        <property name="poolPreparedStatements" value="true" />  
        <property name="maxPoolPreparedStatementPerConnectionSize"  
            value="20" />  
    </bean>  -->

	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />

		<property name="typeHandlersPackage" value="com.zeekie.stock.mybatis" />

		<!-- <property name="typeHandlers"> <array> <bean class="com.zeekie.stock.mybatis.EncodingTransformStringTypeHandler"> 
			<property name="charsetTransformer" ref="charsetTransformer" /> </bean> <bean 
			class="com.zeekie.stock.mybatis.EncodingTransformNStringTypeHandler"> <property 
			name="charsetTransformer" ref="charsetTransformer" /> </bean> <bean class="com.zeekie.stock.mybatis.EncodingTransformClobTypeHandler"> 
			<property name="charsetTransformer" ref="charsetTransformer" /> </bean> </array> 
			</property> -->
		<property name="configLocation" value="classpath:sqlmap-config.xml" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" value="com.zeekie.stock.entity" />
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatis/*.xml" />
	</bean>
	
	<bean id="userDAO" class="com.zeekie.stock.service.dao.Mapper">
		<property name="sqlSessionFactory" ref="sqlSessionFactory" />
	</bean>

	<bean id="charsetTransformer" class="com.zeekie.stock.mybatis.CharsetTransformer">
		<constructor-arg index="0">
			<value>${datasource.charset.clientEncoding}</value> <!--客户端编码 -->
		</constructor-arg>
		<constructor-arg index="1">
			<value>${datasource.charset.serverEncoding}</value><!--服务端编码 -->
		</constructor-arg>
	</bean>
	
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zeekie.stock.respository" />
		<property name="annotationClass" value="com.zeekie.stock.mybatis.MyBatisRepository" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<bean class="sitong.thinker.common.util.mybatis.BatchMapper" id="batchMapper">
        <property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </bean>

	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- all methods starting with 'get' are read-only -->
			<tx:method name="indentify" read-only="true" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="*get*" read-only="true" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="*update*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="*query*" read-only="true" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<!-- other methods use the default transaction settings (see below) -->
			<tx:method name="*save*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="load*" read-only="true" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="record*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="insert*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="deduct*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="deductFee" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="caculate*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="modify*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="set*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="store*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="move*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="bind*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="withdraw" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="add*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="register*" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="currentOperationOver" read-only="false"
				propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="endStock" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="operationIsEnded" read-only="false"
				propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="recharge" read-only="false" propagation="REQUIRED"
				rollback-for="Exception,RuntimeException" />
			<tx:method name="caculateRefereeIncome" read-only="false"
				propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="batchInsert" read-only="false"
				propagation="REQUIRED" rollback-for="Exception,RuntimeException" />
			<tx:method name="doInTransaction" read-only="true"
				propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="transactionTemplate"
		class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager" />
	</bean>

	<bean id="executor" class="java.util.concurrent.ThreadPoolExecutor">
		<constructor-arg value="${thread.pool.corePoolSize}" />
		<constructor-arg value="${thread.pool.maximumPoolSize}" />
		<constructor-arg value="${thread.pool.keepAliveTime}" />
		<constructor-arg value="SECONDS" />
		<constructor-arg ref="blockingQueue" />
	</bean>

	<bean id="scheduledExecutor" class="java.util.concurrent.ScheduledThreadPoolExecutor">
		<constructor-arg value="1" />
	</bean>

	<bean id="blockingQueue" class="java.util.concurrent.LinkedBlockingQueue" />

	<bean id="sensitivewordFilter" class="com.zeekie.stock.service.sensitive.SensitivewordFilter"></bean> 

<bean id="sensitiveword" class="com.zeekie.stock.service.sensitive.SensitiveWordInit"></bean>
	<!-- 定时任务A=扣除管理费 -->
	<bean id="deductManageFeeJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.zeekie.stock.service.timer.DeductManageFeeTimer" />
		</property>
		<property name="targetMethod" value="deductFee" />
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean>

	<bean id="deductManageFeeTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="deductManageFeeJob" />
		<!-- 每天8:00运行一次 -->
		<property name="cronExpression" value="0 45 08 * * ?" />
	</bean>
	<!-- 定时任务A 结束 -->
	
	<!-- 定时任务C=扣除管理费 当天操盘用户 8:45~15:05 
	<bean id="deductManageFeeCurrentJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.zeekie.stock.service.timer.DeductManageFeeTimer" >
				<property name="chargeFeeDate" value="${stock.charge.fee.time}"></property>
			</bean>
		</property>
		<property name="targetMethod" value="deductFeeCurrentDay" />
		<property name="concurrent" value="false" />
	</bean>

	<bean id="deductManageFeeCurrentTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="deductManageFeeCurrentJob" />
		 每天15:05运行一次 
		<property name="cronExpression" value="0 12 17 * * MON-FRI" />
	</bean>
	 定时任务C 结束 -->


	<!-- 定时任务B=更新盈亏金额 -->
	<bean id="caculateFundJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.zeekie.stock.service.timer.CaculateFundTimer" />
		</property>
		<property name="targetMethod" value="caculate" />
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean>

	<bean id="caculateFundTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="caculateFundJob" />
		<property name="startDelay" value="10000" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->
		<property name="repeatInterval" value="10000" /><!-- 每10秒调度一次 -->
	</bean>
	<!-- 定时任务B 结束 -->


	<!-- 定时任务C=获取支付结果-->
	<bean id="receiptJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.zeekie.stock.service.timer.pay.ReceiptsTimer" />
		</property>
		<property name="targetMethod" value="callApi" />
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean>

	<bean id="receiptJobTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
		<property name="jobDetail" ref="receiptJob" />
		<property name="startDelay" value="20000" /><!-- 调度工厂实例化后，经过0秒开始执行调度 -->
		<property name="repeatInterval" value="10000" /><!-- 每10秒调度一次 -->
	</bean>
	
		<!-- 定时任务D= 获取历史委托--> 
   <bean id="entrustJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.zeekie.stock.service.timer.EntrustTimer" />
		</property>
		<property name="targetMethod" value="historyEntrustQuery" />
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean>

	<bean id="entrustTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="entrustJob" />
		<!-- 每天8:00运行一次 -->
		<property name="cronExpression" value="0 30 1 * * ?" />
	</bean>

	<!-- 定时任务E= 计算理财收益--> 
   <bean id="financeJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject">
			<bean class="com.zeekie.stock.service.timer.EntrustTimer" />
		</property>
		<property name="targetMethod" value="caculateFinanceIncome" />
		<property name="concurrent" value="false" /><!-- 作业不并发调度 -->
	</bean>

	<bean id="financeTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">
		<property name="jobDetail" ref="financeJob" />
		<!-- 每天23:30运行一次 -->
		<property name="cronExpression" value="0 56 17 * * ?" />
	</bean>

	  <!--开始调度 -->
	<bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<property name="triggers">
			<list>
			<!--  	<ref bean="deductManageFeeTrigger" />
				<ref bean="caculateFundTrigger"/>
				<ref bean="receiptJobTrigger"/> 
				<ref bean="deductManageFeeCurrentTrigger"/>
				 <ref bean="entrustTrigger"/>
				-->
				 <ref bean="financeTrigger"/>
			</list>
		</property>
	</bean>

	<!-- 支持上传文件 -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	 <property name="maxUploadSize" value="3234343" />
    </bean> 

	<aop:config>
		<aop:pointcut id="businessOperation"
			expression="execution(* com.zeekie.stock.service.impl.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="businessOperation" />
	</aop:config>

</beans>

